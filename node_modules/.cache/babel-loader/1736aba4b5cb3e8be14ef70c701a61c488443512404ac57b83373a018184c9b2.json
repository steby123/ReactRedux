{"ast":null,"code":"import { uiActions } from \"./ui-slice\";\nimport { cartAction } from \"./cart-slice\";\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch('https://learn-redux-f752f-default-rtdb.firebaseio.com/cart.json');\n      if (!response.ok) {\n        throw new Error('Could not fetch cart data');\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartDatas = await fetchData();\n      dispatch(cartAction.replaceCart(cartDatas));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Fetching cart data failed!'\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://learn-redux-f752f-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.itemQuntity\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'succes',\n        title: 'Succes!',\n        message: 'Sent cart data succesfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};","map":{"version":3,"names":["uiActions","cartAction","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartDatas","replaceCart","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify","items","totalQuantity","itemQuntity"],"sources":["D:/Learning_React/Advanced_Reduxer/01-starting-project/src/store/cart-action.js"],"sourcesContent":["import { uiActions } from \"./ui-slice\";\r\nimport { cartAction } from \"./cart-slice\";\r\n\r\nexport const fetchCartData = () => {\r\n    return async (dispatch) => {\r\n        const fetchData = async () => {\r\n            const response = await fetch('https://learn-redux-f752f-default-rtdb.firebaseio.com/cart.json');\r\n\r\n            if(!response.ok){\r\n                throw new Error('Could not fetch cart data');\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n        };\r\n        try{\r\n            const cartDatas = await fetchData();\r\n            dispatch(cartAction.replaceCart(cartDatas));\r\n        }catch(error){\r\n            dispatch(uiActions.showNotification({\r\n                status:'error',\r\n                title:'Error!',\r\n                message:'Fetching cart data failed!'\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nexport const sendCartData = (cart) => {\r\n    return async (dispatch) => {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status:'pending',\r\n          title:'Sending...',\r\n          message:'Sending cart data!'\r\n        })\r\n      )\r\n  \r\n      const sendRequest = async () => {\r\n        const response = await fetch('https://learn-redux-f752f-default-rtdb.firebaseio.com/cart.json',{\r\n          method:'PUT',\r\n          body:JSON.stringify({\r\n            items:cart.items,\r\n            totalQuantity:cart.itemQuntity\r\n          })\r\n        });\r\n    \r\n        if(!response.ok){\r\n          throw new Error('Sending cart data failed.')\r\n        }\r\n      }\r\n  \r\n      try{\r\n        await sendRequest();\r\n        dispatch(uiActions.showNotification({\r\n          status:'succes',\r\n          title:'Succes!',\r\n          message:'Sent cart data succesfully!'\r\n        }))\r\n      }catch(error){\r\n        dispatch(uiActions.showNotification({\r\n          status:'error',\r\n          title:'Error!',\r\n          message:'Sending cart data failed!'\r\n        }))\r\n      }\r\n    }\r\n  \r\n  }"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,UAAU,QAAQ,cAAc;AAEzC,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC/B,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAiE,CAAC;MAE/F,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACf,CAAC;IACD,IAAG;MACC,MAAME,SAAS,GAAG,MAAMP,SAAS,CAAC,CAAC;MACnCD,QAAQ,CAACF,UAAU,CAACW,WAAW,CAACD,SAAS,CAAC,CAAC;IAC/C,CAAC,QAAME,KAAK,EAAC;MACTV,QAAQ,CAACH,SAAS,CAACc,gBAAgB,CAAC;QAChCC,MAAM,EAAC,OAAO;QACdC,KAAK,EAAC,QAAQ;QACdC,OAAO,EAAC;MACZ,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAClC,OAAO,MAAOhB,QAAQ,IAAK;IACzBA,QAAQ,CACNH,SAAS,CAACc,gBAAgB,CAAC;MACzBC,MAAM,EAAC,SAAS;MAChBC,KAAK,EAAC,YAAY;MAClBC,OAAO,EAAC;IACV,CAAC,CACH,CAAC;IAED,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAiE,EAAC;QAC7Fe,MAAM,EAAC,KAAK;QACZC,IAAI,EAACC,IAAI,CAACC,SAAS,CAAC;UAClBC,KAAK,EAACN,IAAI,CAACM,KAAK;UAChBC,aAAa,EAACP,IAAI,CAACQ;QACrB,CAAC;MACH,CAAC,CAAC;MAEF,IAAG,CAACtB,QAAQ,CAACE,EAAE,EAAC;QACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;IACF,CAAC;IAED,IAAG;MACD,MAAMY,WAAW,CAAC,CAAC;MACnBjB,QAAQ,CAACH,SAAS,CAACc,gBAAgB,CAAC;QAClCC,MAAM,EAAC,QAAQ;QACfC,KAAK,EAAC,SAAS;QACfC,OAAO,EAAC;MACV,CAAC,CAAC,CAAC;IACL,CAAC,QAAMJ,KAAK,EAAC;MACXV,QAAQ,CAACH,SAAS,CAACc,gBAAgB,CAAC;QAClCC,MAAM,EAAC,OAAO;QACdC,KAAK,EAAC,QAAQ;QACdC,OAAO,EAAC;MACV,CAAC,CAAC,CAAC;IACL;EACF,CAAC;AAEH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}